기본 세팅

1. 크롬브라우저 설치
2. VScode Editor 설치
3. git 설치
4. Node.js 설치
- 터미널 node -v 로 버전 및 설치 확인
- 노드 설치 시 npm도 같이 설치됨
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
npm? node package manager
무수히 많은 third-party 패키지들이 모여있는 집합소로, 
npm 을 통해 여러 패키지를 다운받아 활용할 수 있다.

패키지 설치 명령어
npm install [설치할 패키지 명]
-----------------------------------
yarn?
npm 패키지 중 하나로
npm처럼 패키지를 다운받을 때 사용하는 명령어 (패키지 명령어)
최초 npm을 통해 yarn을 설치해야한다.

설치 명령어
npm install -g yarn

버전 및 설치 확인 명령어
yarn -v

패키지 설치 명령어
yarn add [설치할 패키지 명]
-------------------------------------
npm과 yarn의 공통점
- 자바스크립트 런타임환경인 노드의 패키지 관리자
- 플레이스토어와 비슷한 개념으로 전 세계의 개발자들이 본인들이 만든 유용하고 다양한 패키지들 또는 프로그램을 온라인 데이터 베이스에 올려놓는다. 이를 쉽게 설치할 수 있도록 해주는 관리자이다.

차이점
-npm 
node.js를 설치할 때 자동 생성
Node platform 자체이다
package-lock 생성

-yarn
2016년 페이스북에서 개발한 패키지 관리자
npm과 호환성이 좋고 속도나 안정성 측면에서 npm보다 월등하게 좋다.
yarn.lock

즉, 속도 보안에서 yarn이 월등히 좋다(최근 npm도 보안 업데이트를 통해 향상)

tip. 
npm 설치시 -g 명령어를 함께사용한다면,
프로젝트 뿐 아니라 해당 데스크탑 전체에서 다운을 하겠다는 것이다.
>>>>>>>>>>>>>>>>>>>>>>>
자바스크립트 런타임 환경의 종류
1. 브라우저 환경 (Chrome, Microsoft Edge, Firefox, IE)
2. node 환경
>>>>>>>>>>>>>>>>>>>>>>>
패키지 매니저가 필요한 이유는 
외부의 라이브러리를 현재 프로젝트에서 의존성 관리를 하기 위함
의존성 -> 프로그램이 써드파티 라이브러리 의존하는 경우

의존성의 정보는 package.json 파일을 통해 package.lock(npm), yarn.lock에 기록

의존성 정보가 저장되기 때문에 프로젝트를 깃에 올릴 때 해당 패키지의 파일을 저장하지 않는다. 추후 파일을 다운 받을 때 의존성 정보를 바탕으로 자동으로 npm install 한다

package.json의 dependencies에는 프로그램에 직접적으로 사용하는 것들을 저장하고 devDependencies에는 개발용 및 테스트용에 필요한 라이브러리를 추가한다. npm기준 (-D를 붙히면 devDependencies로 설치)

기본적으로 다운한 라이브러리를 사용하기 위해서 commonJS에서는 require을 사용하지만 모듈(import) 로 사용하기 위해서는 type:"module"을 package.json 파일에 추가해줘야한다.

만약 패키지매니저가 없다면?
패키지 사이트로 들어가서 직접 다운, 패키지 복사 등 진행해야함.
패키지가 업데이트 된다면 다시 반복 (일관성 떨어짐)

